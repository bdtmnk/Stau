#define analyzer_cxx
#include "analyzer.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TString.h>
#include <cmath>
#include <sstream>
#include <iomanip>
#include "TChain.h"
#include "TH1.h"
#include "TTree.h"
#include "TKey.h"
#include "Riostream.h"
#include "TCanvas.h"
#include "TFile.h"
#include "TLegend.h"
#include "TROOT.h"
#include "TFrame.h"
#include "TGaxis.h"
#include "TStyle.h"
#include <vector>
#include <iostream>
#include <algorithm>
#include "TList.h"
#include <string>
#include "TObject.h"
#include "TBranch.h"
#include <functional>
#include "TAxis.h"
#include "TChain.h"
#include "TMath.h"
#include "Riostream.h"
#include <iostream>
#include <fstream>




using namespace std;



void analyzer::Loop(){


	if (fChain == 0) return;


	CutList.clear();
	CutList.push_back("Nocut");//0
	CutList.push_back("PU");//1
	CutList.push_back("#mu#tau");//2
	CutList.push_back("2ndlepV");//3
	CutList.push_back("3rdlepV");//4
	CutList.push_back("TriggerSF");//5
	CutList.push_back("LeptonSF");//6
	CutList.push_back("Tau-id");//7
	CutList.push_back("TransferR");//8
	CutList.push_back("LeptonTauFakeRate");//9
	CutList.push_back("METrecoil");//10
	CutList.push_back("ZpTcorrection");//11
	CutList.push_back("topPtRwgt");//12
	CutList.push_back("Jets<2 ");//13
	CutList.push_back("btag=0");//14
	CutList.push_back("MTwindow"); //15
	CutList.push_back("Jets<1");//16
	CutList.push_back("PreHEM");//17
	CutList.push_back("PostHEM");//18
	CutList.push_back("BDTVhigh");
	CutList.push_back("StauCuts");
	CutList.push_back("StauCuts2");
	CutList.push_back("MET>20");
	CutList.push_back("MET>30");
	CutList.push_back("MET>40");
	CutList.push_back("MTsum>120");


	string channel = "mutau";
	string Channel = "mutau";
	string region = "REGION";

	//ChiMass = 0;
	ChiMass = 0.;
	//cout<<" THE MASS IS ========================= "<<ChiMass<<endl;
	 int CutNumb = int(CutList.size());
         int iCFCounter[CutNumb];
	 double CFCounter[CutNumb];
	 for (int i=0;i < CutNumb; i++){
                        CFCounter[i] = 0;
			CFCounter_[i] = 0;
         	        iCFCounter[i] = 0;
        }
	fChain->GetEntry(0);
	string old = datasetName->c_str();
	int counter = 0;

	//char hist_[100];
	bool isData = false;
	bool isTT = false;
	bool isWJ = false;
	bool isDY = false;
	bool isDYee = false;
	bool isDYmm = false;
	bool isDYnunu = false;
	bool isDYhigh = false;
	bool isDYlow = false;
	bool isZTT = false;
	bool isDYNJ = false;
	bool isWNJ = false;
	bool isNJ = false;
	bool isSignal = false;
	bool isSUSY = false;
	bool cut_btag = true;

	bool t = true;
	bool f = false;
	bool InvertLeptonIso = LEPTONHERE;
	//bool HighInvertLeptonIso = HIGHISO;
	string Sign = "SIGNHERE";


	string systematic="Nominal";

	string cut = to_string(t);
	char plots_[100];
	string data = "Single";
	string tt = "TT_TuneCUETP8M2T4_13TeV-powheg-pythia8";
	string wj = "WJetsToLNu";
	string wj1 = "W1JetsToLNu";
	string wj2 = "W2JetsToLNu";
	string wj3 = "W3JetsToLNu";
	string wj4 = "W4JetsToLNu";
	string dyj = "DYJetsToLL";
	string dyjhigh = "DYJetsToLL_M-50";
	string dyjlow = "DYJetsToLL_M-5to";
	string dyjlow2 = "DYJetsToLL_M-10to";
	string dyj1 = "DY1JetsToLL";
	string dyj2 = "DY2JetsToLL";
	string dyj3 = "DY3JetsToLL";
	string dyj4 = "DY4JetsToLL";
	string ztt = "isZTT";
	string ttw = "TTWJetsToLNu";
	string signal = "stau";
	string signalC1 = "Stau";
	string signalChi = "LSP";
	string N0part = "0Parton";
	string N1part = "1Parton";
	string N2part = "2Parton";
	string N3part = "3Parton";
	string N4part = "4Parton";
	string HT0to70 = "0To70";
	string HT70to100 = "70To100";
	string HT100to200 = "100To200";
	string HT200to400 = "200To400";
	string HT400to600 = "400To600";
	string HT600to800 = "600To800";
	string HT800to1200 = "800To1200";

	bool isW0Part = false;
	bool isW1Part = false;
	bool isW2Part = false;
	bool isW3Part = false;
	bool isW4Part = false;
	bool isDY0Part = false;
	bool isDY1Part = false;
	bool isDY2Part = false;
	bool isDY3Part = false;
	bool isDY4Part = false;
	bool isHTz = false;
	bool isHTa = false;
	bool isHTb = false;
	bool isHTc = false;
	bool isHTd = false;
	bool isHTe = false;
	bool isHTf = false;

	if (string::npos != old.find(data)) isData= true;
	if (string::npos != old.find(signal) && string::npos != systematic.find("genMET")) isSignal= true;
	if (string::npos != old.find(signalC1) && string::npos != systematic.find("genMET")) isSignal= true;
	if (string::npos != old.find(signalChi) && string::npos != systematic.find("genMET")) isSignal= true;

	if (string::npos != old.find(signal)) isSUSY = true;
	if (string::npos != old.find(signalC1)) isSUSY = true;
	if (string::npos != old.find(signalChi)) isSUSY = true;

	if (string::npos != old.find(tt)) isTT= true;
	if (string::npos != old.find(wj)) isWJ= true;
	if (string::npos != old.find(ttw)) isWJ= false;
	if (string::npos != old.find(dyj)) isDY= true;
	if (string::npos != old.find(dyjhigh)) isDYhigh= true;
	if (string::npos != old.find(dyjlow) || string::npos != old.find(dyjlow2)) isDYlow= true;
	if (string::npos != old.find(dyj1) || string::npos != old.find(dyj2) || string::npos != old.find(dyj3) || string::npos != old.find(dyj4)) isDYNJ = true;
	if ((string::npos != old.find(wj1) || string::npos != old.find(wj2) || string::npos != old.find(wj3) || string::npos != old.find(wj4)) && string::npos == old.find(ttw)) isWNJ= true;
	isNJ = isDYNJ || isWNJ;


	if (isSignal) cout<<" YOU HAVE FOUND ITTTTTTTTT is it signal ???  "<<isSignal<<" systematic "<<systematic<<endl;
	if (isData) cout<<" YOU HAVE FOUND a DATA "<<endl;


	TString fileinName = "/nfs/dust/cms/user/dydukhle/STAU/Analysis18/CMSSW_10_2_16/src/DesyTauAnalyses/NTupleMaker/test/CHANNELHERE/FILEIN";

	if (!isData && (systematic == "JetEnUp" || systematic == "JetEnDown"  || systematic == "UnclEnDown" || systematic == "UnclEnDown" || systematic == "TauEnUp" || systematic == "TauEnDown" || systematic == "ElEnUp" || systematic == "ElEnDown" || systematic == "MuEnUp" || systematic == "MuEnDown" || systematic == "BTagUp" || systematic == "BTagDown") )
	{fileinName ="/nfs/dust/cms/user/dydukhle/STAU/Analysis18/CMSSW_10_2_16/src/DesyTauAnalyses/NTupleMaker/test/CHANNELHERE_"+systematic+"/FILEIN";
	}

	TFile * filein = new TFile(fileinName,"read");
	string fln = filein->GetName();
	if (string::npos != fln.find(ztt)) isZTT= true;
	if (string::npos == fln.find(ztt)) isZTT= false;

	TH1D *histPt;
/*
	if (systematic == "ScalesUp" ) histW = (TH1D*)filein->Get("mutau/histWeightsScalesUp");
	else if (systematic == "ScalesDown" ) histW = (TH1D*)filein->Get("mutau/histWeightsScalesDown");
	else if (systematic == "PDFUp" ) histW = (TH1D*)filein->Get("mutau/histWeightsPDFUp");
	else if (systematic == "PDFDown" ) histW = (TH1D*)filein->Get("mutau/histWeightsPDFDown");
	else  {histW = (TH1D*)filein->Get("mutau/histWeightsH");}
*/
	TH1D * _histW = (TH1D*)filein->Get("mutau/histWeightsH");
	TH1D * histW = (TH1D*)_histW->Clone();
	if (string::npos != fln.find(N0part) && (isWJ || isWNJ)) isW0Part= true;
	if (string::npos != fln.find(N1part) && (isWJ || isWNJ)) isW1Part= true;
	if (string::npos != fln.find(N2part) && (isWJ || isWNJ)) isW2Part= true;
	if (string::npos != fln.find(N3part) && (isWJ || isWNJ)) isW3Part= true;
	if (string::npos != fln.find(N4part) && (isWJ || isWNJ)) isW4Part= true;
	if (string::npos != fln.find(N0part) && isDYhigh) isDY0Part= true;
	if (string::npos != fln.find(N1part) && isDYhigh) isDY1Part= true;
	if (string::npos != fln.find(N2part) && isDYhigh) isDY2Part= true;
	if (string::npos != fln.find(N3part) && isDYhigh) isDY3Part= true;
	if (string::npos != fln.find(N4part) && isDYhigh) isDY4Part= true;

	if (string::npos != fln.find(HT0to70)) isHTz= true;
	if (string::npos != fln.find(HT70to100)) isHTa= true;
	if (string::npos != fln.find(HT100to200)) isHTb= true;
	if (string::npos != fln.find(HT200to400)) isHTc= true;
	if (string::npos != fln.find(HT400to600)) isHTd= true;
	if (string::npos != fln.find(HT600to800)) isHTe= true;
	if (string::npos != fln.find(HT800to1200)) isHTf= true;

	cout<<" check =============================== "<<fln<<" isWJ "<<isWJ<<" isW1 "<<isW1Part<<" isWNJ "<<isWNJ<<" is HT ? "<<isHTa<<"  "<<isHTb<<endl;

	histW->SetName("histWeightsH");
	histW->SetTitle("histWeightsH");

	if (isSUSY) histPt = (TH1D*)filein->Get("mutau/histPt");
	float Nw = 1;
	//if (isSUSY) { Nw = 1/histPt->GetSumOfWeights(); Nw *=histW->GetSumOfWeights();}

	cout<<" The Systematic "<<systematic<<" histW "<<histW->GetSumOfWeights()<<endl;

	TH1D * histTop , *histTopSq;
	if (isTT) histTop = (TH1D*)filein->Get("mutau/histTopPt");
	if (isTT && systematic == "TopPtUp" ) histTopSq = (TH1D*)filein->Get("mutau/histTopPtSq");

	//TH1D * CutFlow = (TH1D*)filein->Get("mutau/CutFlowUnW");
	TFile * file = new TFile("plots.root","recreate");


	file->mkdir(Channel.c_str());
	file->cd(Channel.c_str());
	float top_w = 1.;
	Long64_t nentries = fChain->GetEntriesFast();
	SetupHists(CutNumb,"");
//	SetupHistsnSR(CutNumb);


	Long64_t nbytes = 0, nb = 0;
	int genHTa=0;
	int genHTb=0;
	int genHTc=0;
	int genHTd=0;
	int genHTlow=0;
	int is0partons=0;
	int is1partons=0;
	int is2partons=0;
	int is3partons=0;
	int is4partons=0;

	SetupTreeTp();

	Long64_t FirstEntrie =0;
	if (!isData && !isSUSY) FirstEntrie = Long64_t(nentries*0.3 +0.5 );
	if (isData && region=="CR") FirstEntrie = Long64_t(nentries*0.3 +0.5 );
	if (string::npos != old.find("Stau100_LSP1") || string::npos != old.find("Stau150_LSP1") || string::npos != old.find("Stau200_LSP1") ) FirstEntrie = Long64_t(nentries*0.8 +0.5 );

	for (Long64_t jentry=FirstEntrie; jentry<nentries;jentry++) {

		Long64_t ientry = LoadTree(jentry);
		nb = fChain->GetEntry(jentry);   nbytes += nb;
		float all_weights = 1.;

		////////////////// IMPORTANT///////////////////


		if (mu_relIso[0] > 0.15) continue;

		bool isDYTauTau = false;
		bool isDYll = false;
		npart=npartons;

		if ((isDY  ||  isDYNJ) && isDYTT>0.5) isDYTauTau = true;
		if ((isDY  ||  isDYNJ) && isDYEE>0.5) isDYee = true;
		if ((isDY  ||  isDYNJ) && isDYMM>0.5) isDYmm = true;
		if ((isDY  ||  isDYNJ) && isDYNuNu>0.5) isDYnunu = true;
		if ((isDY  ||  isDYNJ) && isDYTT<0.5) isDYll = true;
		if ((isDY || isDYNJ) && isZTT && !isDYTauTau) continue;
		if ((isDY || isDYNJ) && !isZTT && !isDYll) continue;

		float charge_ =mu_charge[muon_index]  * ta_charge[taus_index];

		if ( charge_ < 0. && Sign == "SS") continue;
		if ( charge_ > 0. && Sign == "OS") continue;



		if (npartons!=0 && (isW0Part || isDY0Part)) continue;
		if (npartons!=1 && (isW1Part || isDY1Part)) continue;
		if (npartons!=2 && (isW2Part || isDY2Part)) continue;
		if (npartons!=3 && (isW3Part || isDY3Part)) continue;
		if (npartons!=4 && (isW4Part || isDY4Part)) continue;

		if (npartons==0) is0partons++;
		if (npartons==1) is1partons++;
		if (npartons==2) is2partons++;
		if (npartons==3) is3partons++;
		if (npartons==4) is4partons++;

		if ( jentry%100000 ==0 ) cout<<" working for you...processed " <<jentry<<" events from "<<nentries<<" dataset "<<datasetName->c_str()<<" weight "<<all_weights<< " partons "<<npartons<<"  "<<isW0Part<<"  "<<isW1Part<<"  "<<isW2Part<<endl;

    if (isData && met_flag<0.5) continue;

		JetsMV.clear();
		MuMV.clear();
		ElMV.clear();
		TauMV.clear();
		btag_index.clear();

		JetsV.SetPxPyPzE(0.,0.,0.,0.);
  	MuV.SetPxPyPzE(0.,0.,0.,0.);
		ElV.SetPxPyPzE(0.,0.,0.,0.);
		TauV.SetPxPyPzE(0.,0.,0.,0.);

		for (int nj=0;nj<njets;++nj) {
			int jet_index = jets_cleaned[nj];
			JetsV.SetPxPyPzE(0.,0.,0.,0.);
			JetsV.SetPxPyPzE(jet_px[jet_index], jet_py[jet_index],jet_pz[jet_index],jet_e[jet_index]);
			JetsMV.push_back(JetsV);
		}

	float met = -1;


		METV.SetPx(met_ex);
		METV.SetPy(met_ey);
		met= sqrt(met_ex*met_ex + met_ey*met_ey);
		puMETV.SetPtEtaPhiE(puppimet_pt, 0, 0, 0);
	if (systematic =="JetEnUp")
		{
		METV.SetPx(met_ex_JetEnUp);
		METV.SetPy(met_ey_JetEnUp);
		met = sqrt(met_ex_JetEnUp*met_ex_JetEnUp + met_ey_JetEnUp*met_ey_JetEnUp);
		}

	if (systematic =="JetEnDown")
		{
		METV.SetPx(met_ex_JetEnDown);
		METV.SetPy(met_ey_JetEnDown);
		met = sqrt(met_ex_JetEnDown*met_ex_JetEnDown + met_ey_JetEnDown*met_ey_JetEnDown);
		}

	if (systematic =="UnclEnUp")
		{
		METV.SetPx(met_ex_UnclusteredEnUp);
		METV.SetPy(met_ey_UnclusteredEnUp);
		met = sqrt(met_ex_UnclusteredEnUp*met_ex_UnclusteredEnUp + met_ey_UnclusteredEnUp*met_ey_UnclusteredEnUp);
		}

	if (systematic =="UnclEnDown")
		{
		METV.SetPx(met_ex_UnclusteredEnDown);
		METV.SetPy(met_ey_UnclusteredEnDown);
		met = sqrt(met_ex_UnclusteredEnDown*met_ex_UnclusteredEnDown + met_ey_UnclusteredEnDown*met_ey_UnclusteredEnDown);
		}

if(muon_index>-1 )			MuV.SetPtEtaPhiM(mu_pt[muon_index], mu_eta[muon_index], mu_phi[muon_index], muonMass);
if(electron_index>-1 )		ElV.SetPtEtaPhiM(el_pt[electron_index], el_eta[electron_index], el_phi[electron_index],electronMass);
if (taus_index>-1 )			TauV.SetPtEtaPhiM(ta_pt[taus_index], ta_eta[taus_index], ta_phi[taus_index], ta_mass[taus_index]);

		int iCut = 1;

		if(isData){
                pu_weight=1;
                gen_weight=1;
                }
		  all_weights = pu_weight * gen_weight ;
		double cLower, cUpper;
		vector <double> ScalesV; ScalesV.clear();
//		ScalesV.push_back(wScale0);
		ScalesV.push_back(wScale1);
		ScalesV.push_back(wScale2);
		ScalesV.push_back(wScale3);
		ScalesV.push_back(wScale4);
		ScalesV.push_back(wScale5);
		ScalesV.push_back(wScale6);
		ScalesV.push_back(wScale7);
		ScalesV.push_back(wScale8);

		cLower = *min_element(ScalesV.begin(), ScalesV.end());
    cUpper = *max_element(ScalesV.begin(), ScalesV.end());

		if (systematic =="ScalesDown") all_weights *=cLower;
		if (systematic =="ScalesUp") all_weights *=cUpper;
		if (systematic =="PDFUp") all_weights *=wPDFUp;
		if (systematic =="PDFDown") all_weights *=wPDFDown;

		double ptTau1 = (double)ta_pt[taus_index];
		double etaTau1 = (double)ta_eta[taus_index];
		double ptMu1 = (double)mu_pt[muon_index];
		double etaMu1 = (double)mu_eta[muon_index];

		bool isRealTau  = (genTauMatched>0.5 && !isData) ;
		bool isMuPromptLepton =  (genLeptonMatchedPromptMu >0.5 && genLeptonMatchedPromptEl<0.5 && !isData);
		bool isElPromptLepton =  (genLeptonMatchedPromptEl >0.5 && genLeptonMatchedPromptMu<0.5 && !isData);
		bool isMuFromTau =  (genMuMatchedToTauDecay > 0.5 && !isData);


		bool isfakeTauFromPromptLepton = matchedTauToPromptEl>0.5 || matchedTauToPromptMu >0.5 ;

		bool isfakeTauFromJet = genTauMatched<0.5 && !isfakeTauFromPromptLepton ;
		bool isfakeTauFromHadron = matchedTauToMuHadronDec > 0.5 || matchedTauToElHadronDec > 0.5;

		if (isfakeTauFromHadron) isfakeTauFromJet = true;

		bool isfakeTauFromMu =  ( genTauMatched < 0.5 && matchedTauToPromptMu > 0.5 && !isfakeTauFromJet && !isData) ;
		bool isfakeTauFromEl =  ( genTauMatched < 0.5 && matchedTauToPromptEl > 0.5 && !isfakeTauFromJet && !isData) ;


		bool isfakeMuFromGluon =  ( genLeptonMatchedGluon >0.5 && !isData) ;
		bool isfakeMuFromHFQ =  (  genLeptonMatchedHFQ >0.5 && !isData) ;
		bool isfakeMuFromLFQ =  (  genLeptonMatchedLFQ >0.5 && !isData) ;


		if ( isfakeTauFromJet && !isData && !isSUSY) continue;
		if (ta_IsoFlagVTight[0] <0.5 && isSUSY) continue;

    bool tauIdVTight = ta_IsoFlagVTight[0];
    bool tauIdLoose = ta_IsoFlagLoose[0];


		if (!isSUSY)
		{
			if (tauIdVTight <0.5 && region=="SR" ) continue;
			if ( (!isRealTau || isfakeTauFromJet) && !isData && region=="CR") continue;
			if (!(tauIdVTight < 0.5 && ta_IsoFlagLoose[0] > 0.5)  && region=="CR" ) continue;
			if ((tauIdVTight < 0.5 && ta_IsoFlagLoose[0] > 0.5)  && region=="CR" )
			{

					string era = "Nominal";
					string sel = "DeepTau";
					float tfr=TauFakeRateFromData(ptTau1,etaTau1,sel,era);
					all_weights *= tfr;

			}
		}

	//	double tfr  = TauFakeRate(ptTau1,etaTau1,channel,systematic);
	//	if (!isRealTau && isfakeTauFromJet  && !isData) all_weights *= tfr;

		int is_hem=0;
		if(ElV.Pt()>=30 && ElV.Eta()>=-3.0 && ElV.Eta()<=-1.4 && ElV.Phi()>=-1.57 && ElV.Phi()<=-0.87) is_hem+=1;
		if(TauV.Pt()>=30 && TauV.Eta()>=-3.0 && TauV.Eta()<=-1.4 && TauV.Phi()>=-1.57 && TauV.Phi()<=-0.87) is_hem+=1;
		for (int nj=0;nj<JetsMV.size();++nj) {

				if(JetsMV[nj].Pt()>=0 && JetsMV[nj].Eta()>=-3.2 && JetsMV[nj].Eta()<=-1.2 && JetsMV[nj].Phi()>=-1.77 && JetsMV[nj].Phi()<=-0.67) is_hem+=1;

		}
		//Cut 0 No Cut;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);


	
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (mu_relIso[0] > 0.15 && !InvertLeptonIso) continue;
		if (mu_relIso[0] < 0.15 && InvertLeptonIso) continue;
		if (mu_relIso[0] > 0.3) continue;


		if ( fabs(mu_dz[muon_index]) > 0.2) continue;
		if ( fabs(mu_dxy[muon_index]) > 0.045) continue;
		if ( fabs(mu_charge[muon_index]) !=1 ) continue;
		if ( fabs(ta_charge[taus_index]) !=1 ) continue;

    double Dr=deltaR(MuV.Eta(), MuV.Phi(), TauV.Eta(),TauV.Phi());
		if (Dr>3.5 && !InvertLeptonIso) continue;
		if (Dr<3.5 && InvertLeptonIso) continue;

		double dPhiJM = 0;
		if (JetsMV.size()>0)dPhiJM=dPhiFrom2P( JetsMV.at(0).Px(), JetsMV.at(0).Py(), METV.Px(),  METV.Py() );

		//if (JetsMV.size()>0 && TMath::Cos(dPhiJM)>0.9) continue;
		//Cut 1 PU pu_weight?
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV, puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
    iCFCounter[iCut]++;
		iCut++;

		//Cut second lepton veto
		if (event_secondLeptonVeto >0.5) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
    iCFCounter[iCut]++;
		iCut++;

		//Cut third lepton veto
		if (event_thirdLeptonVeto >0.5) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
    iCFCounter[iCut]++;
		iCut++;

		//Cut Trigger Weights
		if (!isData) all_weights *= trig_weight;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
    iCFCounter[iCut]++;
		iCut++;

		//Cut Lepton Scale Factor
		if (!isData) all_weights *= LSF_weight;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		//TauId
		string tID="MVA_Tight";
		double tauId = TauiD(channel,tID);
		if (isRealTau && !isData) all_weights *= 0.95;

                FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
               iCFCounter[iCut]++;
		iCut++;

		//Transfer R;
		//string WP = systematic;
		//double tfr  = TauFakeRate(ptTau1,etaTau1,channel,systematic);
		//if (!isRealTau && isfakeTauFromJet  && !isData) all_weights *= tfr;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV,  ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
               iCFCounter[iCut]++;
		iCut++;



		//reco tau to matched genmu but not matched tau which is decayed hadronically or electron
		TString TauID = "DeepTauID";
                TString year="2018";
		TString wpVsEle = "VVLoose";
	        TString wpVsMu = "Tight";
                //reco tau to matched genmu but not matched tau which is decayed hadronically or electron

                double tfrmu;
                double tfrel;
		TString cmsswBase = "/nfs/dust/cms/user/dydukhle/STAU/Analysis18/CMSSW_10_2_16/"; 
                if (TauID=="DeepTauID"){

                        TFile muTauFRfile(TString(cmsswBase)+"/src/TauIDSFs/data/TauID_SF_eta_DeepTau2017v2p1VSmu_"+year+"ReReco.root");
                        TH1F *SF_mt_hist = (TH1F*) muTauFRfile.Get(wpVsMu);
                        tfrmu = SF_mt_hist->GetBinContent(SF_mt_hist->GetXaxis()->FindBin(abs(MuV.Eta())));

                                TFile eTauFRfile(TString(cmsswBase)+"/src/TauIDSFs/data/TauID_SF_eta_DeepTau2017v2p1VSe_"+year+"ReReco.root");
                        TH1F *SF_et_hist = (TH1F*) eTauFRfile.Get(wpVsEle);
                        tfrel = SF_et_hist->GetBinContent(SF_et_hist->GetXaxis()->FindBin(abs(MuV.Eta())));
                }

                if (TauID == "MVA"){

                         tfrmu  = MuonFakeRate(MuV.Pt(),MuV.Eta());
                         tfrel  = ElectronFakeRate(MuV.Pt(),MuV.Eta());
                }

                if ( !isRealTau && isfakeTauFromMu  && !isfakeTauFromEl && !isData) all_weights *= tfrmu;
                if ( !isRealTau && isfakeTauFromEl  && !isfakeTauFromMu && !isData) all_weights *= tfrel;




		//Cut Lepton Tau Fake Rate
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV,  ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
    iCFCounter[iCut]++;
		iCut++;


		if (isWJ || isDY || isWNJ || isDYNJ) {

				METV.SetPx(0.);
				METV.SetPy(0.);
				METV.SetPx(met_ex_recoil);
				METV.SetPy(met_ey_recoil);
				met=sqrt(met_ex_recoil*met_ex_recoil+met_ey_recoil*met_ey_recoil);

			if (systematic =="JetEnUp")
				{
				METV.SetPx(met_ex_JetEnUp_recoil);
				METV.SetPy(met_ey_JetEnUp_recoil);
				met = sqrt(met_ex_JetEnUp_recoil*met_ex_JetEnUp_recoil + met_ey_JetEnUp_recoil*met_ey_JetEnUp_recoil);
				}

			if (systematic =="JetEnDown")
				{
				METV.SetPx(met_ex_JetEnDown_recoil);
				METV.SetPy(met_ey_JetEnDown_recoil);
				met = sqrt(met_ex_JetEnDown_recoil*met_ex_JetEnDown_recoil + met_ey_JetEnDown_recoil*met_ey_JetEnDown_recoil);
				}

			if (systematic =="UnclEnUp")
				{
				METV.SetPx(met_ex_UnclusteredEnUp_recoil);
				METV.SetPy(met_ey_UnclusteredEnUp_recoil);
				met = sqrt(met_ex_UnclusteredEnUp_recoil*met_ex_UnclusteredEnUp_recoil + met_ey_UnclusteredEnUp_recoil*met_ey_UnclusteredEnUp_recoil);
				}

			if (systematic =="UnclEnDown")
				{
				METV.SetPx(met_ex_UnclusteredEnDown_recoil);
				METV.SetPy(met_ey_UnclusteredEnDown_recoil);
				met = sqrt(met_ex_UnclusteredEnDown_recoil*met_ex_UnclusteredEnDown_recoil + met_ey_UnclusteredEnDown_recoil*met_ey_UnclusteredEnDown_recoil);
				}

				if (systematic =="METRecoilUp")
					{
					METV.SetPx(met_ex_recoil*1.02);
					METV.SetPy(met_ey_recoil*1.02);
					met=METV.Pt();
					}

				if (systematic =="METRecoilDown")
					{
					METV.SetPx(met_ex_recoil*0.98);
					METV.SetPy(met_ey_recoil*0.98);
					met=METV.Pt();
					}
		}
		//Cut MET Recoil Correction
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
    iCFCounter[iCut]++;
		iCut++;

		if (isDY || isDYNJ){
		if (systematic !="ZPtUp" && systematic !="ZPtDown" ) all_weights *= zptmassweight;
		if (systematic =="ZPtUp") all_weights *= zptmassweight*zptmassweight;
		}
		//Zpt Reweighting
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
    iCFCounter[iCut]++;
		iCut++;

	  if (isTT){
			if (systematic !="TopPtUp" && systematic !="TopPtDown" ) all_weights *= top_weight;
			if (systematic =="TopPtUp") all_weights *= top_weight*top_weight;
			if (systematic =="TopPtDown") all_weights *= 1;
		}
		//Cut Top Pt Reweighting
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
    iCFCounter[iCut]++;
		iCut++;

		if (TauV.Pt()<30) continue;
		TLorentzVector DiL2 = MuV  + TauV;
		if (DiL2.M()<50) continue;
		if (njets>1.5) continue;
		//Cut Njets Cut
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
    iCFCounter[iCut]++;
		iCut++;

		if (nbtag>0.5) continue;
		//Cut nbtag cut;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
    iCFCounter[iCut]++;
		iCut++;


		 TLorentzVector DiL = MuV  ;
  	 double dPhi=dPhiFrom2P( DiL.Px(), DiL.Py(), METV.Px(),  METV.Py() );
     double MT = 0;MT=sqrt(2*DiL.Pt()*met*(1-TMath::Cos(dPhi)));
  	 double dPhiT=dPhiFrom2P( TauV.Px(), TauV.Py(), METV.Px(),  METV.Py() );
     double MTt = 0;MTt=sqrt(2*TauV.Pt()*met*(1-TMath::Cos(dPhiT)));
		 double MTsum = MT+MTt;

		if (MT > 60. && MT < 120. ) continue;
		if (MT < 20.) continue;
		//Cut MT Windows;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
    iCFCounter[iCut]++;
		iCut++;

TLorentzVector DiLL = MuV +TauV ;

                double dEta = MuV.Eta() - TauV.Eta();
                double dEtaJMu = -1.; if (JetsMV.size()>0) dEtaJMu = JetsMV.at(0).Eta() - MuV.Eta();
                double dEtaJTau = -1.; if (JetsMV.size()>0) dEtaJTau = JetsMV.at(0).Eta() - TauV.Eta();
                double Dr2=-1; if  (JetsMV.size()>0) {Dr2=deltaR(JetsMV.at(0).Eta(),JetsMV.at(0).Phi(), TauV.Eta(),TauV.Phi());}


                if (njets>0.5) continue;
                if (Dr < 2.) continue;
                double dPhiDiL=dPhiFrom2P( MuV.Px(), MuV.Py(), TauV.Px(),  TauV.Py() );
                if (dPhiDiL < 1.5) continue;

                FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
                CFCounter[iCut]+= all_weights;
                CFCounter_[iCut]+= all_weights;
		iCFCounter[iCut]++;
                iCut++;


		if((isData && event_run<319077) || (!isData)){
			//PreHEM Cut
			FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
			CFCounter[iCut]+= all_weights;
			CFCounter_[iCut]+= all_weights;
		}
                iCFCounter[iCut]++;
		iCut++;
		if((isData && event_run>319077) || (!isData)){
			if (is_hem>0)continue;
			//PostHEM Cut
			FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
			CFCounter[iCut]+= all_weights;
			CFCounter_[iCut]+= all_weights;
		}
		iCFCounter[iCut]++;
                iCut++;



// BDT calculation

/*
	double dPhiMuMET=dPhiFrom2P( MuV.Px(), MuV.Py(), METV.Px(),  METV.Py() );
	double dPhiTauMET=dPhiFrom2P( TauV.Px(), TauV.Py(), METV.Px(),  METV.Py() );
	float mttotal = sqrt(MT*MT + MTt*MTt);
	double Mt2as = asymm_mt2_lester_bisect::get_mT2(muonMass, MuV.Px(), MuV.Py(),tauMass,TauV.Px(),TauV.Py(),METV.Px(),METV.Py(),0,0,0);
	float tauUnitX = TauV.Px()/TauV.Pt();
	float tauUnitY = TauV.Py()/TauV.Pt();

	float muonUnitX = MuV.Px()/MuV.Pt();
	float muonUnitY = MuV.Py()/MuV.Pt();

	float zetaX = tauUnitX + muonUnitX;
	float zetaY = tauUnitY + muonUnitY;

	float normZeta = TMath::Sqrt(zetaX*zetaX+zetaY*zetaY);

	zetaX = zetaX/normZeta;
	zetaY = zetaY/normZeta;

	float vectorVisX = MuV.Px() + TauV.Px();
	float vectorVisY = MuV.Py() + TauV.Py();

	// computation of DZeta variable
	float pzetamiss = METV.Px()*zetaX + METV.Py()*zetaY;
	float pzetavis = vectorVisX*zetaX + vectorVisY*zetaY;
	float dzeta = pzetamiss - 0.85*pzetavis;

	DiL = MuV  + TauV;
	double mcta = sqrt( 2*MuV.Pt()*TauV.Pt()*(1+cos(MuV.Phi()-TauV.Phi())) );

			(*inputVec)[0] = METV.Pt();
			(*inputVec)[1] = MuV.Pt();
			(*inputVec)[2] = TauV.Pt();
			(*inputVec)[3] = dEta;
			(*inputVec)[4] = mttotal;
			(*inputVec)[5] = dzeta;
			(*inputVec)[6] = Dr;
			(*inputVec)[7] = DiL.M();
			(*inputVec)[8] = MT;
			(*inputVec)[9] = mcta;
			(*inputVec)[10] = Mt2as;
			(*inputVec)[11] = dPhiMuMET;
            (*inputVec)[12] = dPhiTauMET;

		 DataChunk *sample = new DataChunkFlat(13, 0);
     sample->set_data(*inputVec);
     vector<float> responce = ResponseMutau.compute_output(sample);
     float retval = responce[0];


             //MetV_Pt =  METV.Pt();
             //V_Pt = MuV.Pt();
             //Tau_Pt = TauV.Pt();
             //DiL_M = DiL.M();
             //t3f->Fill();

            //DataChunk *sample = new DataChunkFlat(13, 0);
            //sample->set_data(*inputVec);
           //vector<float> responce = ResponseMutau.compute_output(sample);

//        float retval = responce[0];

if (retval>0.55)		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV,  ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
if (retval>0.55)			CFCounter[iCut]+= all_weights;
if (retval>0.55)			CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;



if (retval<0.55)		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
if (retval<0.55)			CFCounter[iCut]+= all_weights;
if (retval<0.55)			CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
*/

/*

		if (TauV.Pt()>70)		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		if (TauV.Pt()>70)		CFCounter[iCut]+= all_weights;
		if (TauV.Pt()>70)		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

*/


	//	if ( fabs(mu_dz[muon_index]) > 0.04) continue;
	//	if ( fabs(mu_dxy[muon_index]) > 0.02) continue;
	//	if (ta_relIso[0] < 0.85) continue;

	//	if (fabs(dEta)>1.5 && !InvertLeptonIso) continue;
	//	if (fabs(dEta)<2 && InvertLeptonIso) continue;
		if (dPhiDiL<1.5) continue;
	//	if (dPhiDiL>3.2) continue;
	//	if (Dr<2.) continue;
	//	if (Dr>3.2 && !InvertLeptonIso) continue;
	//	if (Dr<3.5 && InvertLeptonIso) continue;


/*
if (retval>0.95)			FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
if (retval>0.95)			CFCounter[iCut]+= all_weights;
if (retval>0.95)			CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


		if ( fabs(mu_dz[muon_index]) > 0.02) continue;
		if ( fabs(ta_dxy[taus_index]) > 0.02) continue;

		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (met<20.) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (met<30.) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (met<40.) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (MTsum<120.) continue;
		FillHists(iCut, all_weights, ElV, MuV, TauV,JetsMV, METV,puMETV, ChiMass,mIntermediate, Channel, muon_index,electron_index,taus_index,isSignal);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
*/
		Tp->Fill();

  }
	file->cd(Channel.c_str());	
	histW->Write();
	float Lumi = 35864.;

	if (isData) Lumi = 1.;
		 for(int ci = 0; ci < CutNumb; ci++)
			{
			CutFlowUnW->SetBinContent(1+ci,0);
			if (CutNumb < 2)       CutFlowUnW->SetBinContent(1+ci,CFCounter_[ci]);
			else
			CutFlowUnW->SetBinContent(1+ci,float(CFCounter[ci]) );


			//cout<<" Count "<<ci<<" binContent "<<CutFlowUnW->GetBinContent(1+ci)<<"  CFCounter_ "<<CFCounter_[ci]<<" CFCounter "<<CFCounter[ci]<<" iCFCounter "<<iCFCounter[ci]<<" Name "<<CutFlowUnW->GetXaxis()->GetBinLabel(1+ci)<<" entry  "<<CutFlowUnW->GetBinContent(1+ci)<<" prediction for Lumi " <<Lumi<<"  "<<float (CutFlowUnW->GetBinContent(1+ci))*hxsecW->GetMean()*Lumi/histW->GetSumOfWeights()<<endl;
			cout<<" Count "<<ci<<" binContent "<<CutFlowUnW->GetBinContent(1+ci)<<"  CFCounter_ "<<CFCounter_[ci]<<" CFCounter "<<CFCounter[ci]<<" iCFCounter "<<iCFCounter[ci]<<" Name "<<CutFlowUnW->GetXaxis()->GetBinLabel(1+ci)<<" entry  "<<CutFlowUnW->GetBinContent(1+ci)<<endl;

			}


			cout<<"  end from TH1D "<<endl;

	CutFlowUnW->Write();
//	histW->Write();
	if (isTT) histTop->Write();
	if (isTT && systematic == "TopPtUp"  ) histTopSq->Write();
	//Tp->Write();
	file->Write();
	file->Close();
	cout<<" Failed events  "<<counter<<endl;
	}
/////////////////////////////////////////////
